/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file    {{ project }}_{{ file }}.c
  * @brief   Código de inicialización de hilos para {{ project }}.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 TECNA PERU S.A.C.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "{{ project }}_{{ file }}.h"

/* USER CODE BEGIN 0 */

extern uint8_t osPoolInit(void *pointer);

{% if tasks %}
  /* Declaración de handles ThreadX para cada tarea */
  {% for task in tasks %}
OsTaskId {{ task.name }}_thread;
  {% endfor %}
{% endif %}
/* USER CODE END 0 */

/*----------------------------------------------------------------------------*/
/* threads {{ project }}                                                     */
/*----------------------------------------------------------------------------*/
/* USER CODE BEGIN 1 */

/**
  * @brief thread initialize function
  * @param memory: puntero a TX_BYTE_POOL u otro recurso para asignar pilas
  * @retval TX_SUCCESS si todo OK, error en otro caso
  */
error_t {{ project | replace('-', '_') }}_tasks_initialize(void *memory) {
    /* Local variables -------------------------------------------------------*/
    OsTaskParameters params = OS_TASK_DEFAULT_PARAMS;
    error_t ret = ERROR_NONE;

    /*ospool mem init*/
    osPoolInit(memory);

    {% if tasks %}
    /* Crear hilos según configuración */
    {% for task in tasks %}

    /* task {{ task.name }} */
    params = OS_TASK_DEFAULT_PARAMS;
    params.priority = {{ project | replace('-', '_') | upper }}_{{ task.name | replace('-', '_') | upper }}_PRIORITY;
    params.stackSize = {{ project | replace('-', '_') | upper }}_{{ task.name | replace('-', '_') | upper }}_STACK_SIZE;

    {{ task.name }}_thread = osCreateTask("{{ task.name }}", 
                              {{ project | replace('-', '_') }}_{{ task.name | replace('-', '_') }}_entry, 
                              {{ project | replace('-', '_') | upper }}_{{ task.name | replace('-', '_') | upper }}_PARAMS, 
                              &params);

    /* Check {{ task.name }} thread creation */
    if({{ task.name }}_thread == NULL)
    {
      ret = ERROR_FAILURE;
      return ret;
    }
    
    {% endfor %}
    {% endif %}

    return ret;
}

/* Entry functions for cada tarea */
{% if tasks %}
  {% for task in tasks %}
/**
  * @brief  Entry para la tarea {{ task.name }}
  * @param  param: valor definido en {{ project }}_{{ file }}_config.h como {{ project | replace('-', '_') | upper }}_{{ task.name | replace('-', '_') | upper }}_PARAMS
  * @retval none
  */
__weak void {{ project | replace('-', '_') }}_{{ task.name | replace('-', '_') }}_entry(void *param) {
    /* init o variables locales si se necesita */
    for (;;) {
        osDelayTask(1000);
    }
}
  {% endfor %}
{% endif %}
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */

/* USER CODE END 2 */